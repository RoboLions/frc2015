// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1261.RoboLions2015.subsystems;

import org.usfirst.frc1261.RoboLions2015.RobotMap;
import org.usfirst.frc1261.RoboLions2015.commands.*;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.PIDSource.PIDSourceParameter;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder leftEncoder = RobotMap.driveTrainLeftEncoder;
    Encoder rightEncoder = RobotMap.driveTrainRightEncoder;
    Gyro gyro = RobotMap.gyro;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon rightFrontDrive = RobotMap.driveTrainrightFrontDrive;
    CANTalon rightBackDrive = RobotMap.driveTrainrightBackDrive;
    CANTalon leftBackDrive = RobotMap.driveTrainleftBackDrive;
    CANTalon leftFrontDrive = RobotMap.driveTrainleftFrontDrive;
    RobotDrive robotDrive = RobotMap.driveTrainrobotDrive;
    
    boolean straightControllerEnabled = false;
    boolean turnControllerEnabled = false;
    
    PIDController straightController;
    PIDController turnController;
    
    private static final double straight_kP = 0.015;
    private static final double straight_kI = 0.0;
    private static final double straight_kD = 0.012;
    
    private static final double tolerance = 10.0;
    
    private static final double turn_kP=0.015;
    private static final double turn_kI=0;
    private static final double turn_kD=0.010;
    
    Timer t = new Timer();
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    int pulsesPerRotation = 360;
	double diameterInches = 6;
    
	public DriveTrain(){
    	initStraightController();
    	initTurnController();
	}
	
    public RobotDrive getRobotDrive() {
    	return robotDrive;
    }
    
    public double pulsesTraveled() {
    	return (leftEncoder.getRaw() - rightEncoder.getRaw()) / 2;
    	//DO NOT CHANGE TO PLUS. The Encoders measure in opposite directions. 1000 on one = -1000 on the other.
    }
    
    public double distanceTraveled() {
    	return (leftEncoder.getDistance() - rightEncoder.getDistance()) / 2;
    	//DO NOT CHANGE TO PLUS. The Encoders measure in opposite directions. 1000 on one = -1000 on the other.
    }
    
    public void resetDistance() {
    	leftEncoder.reset();
    	rightEncoder.reset();
    }
    
    public SpeedController getLeftDrive() {
    	return leftFrontDrive;
    }
    
    public SpeedController getRightDrive() {
    	return rightFrontDrive;
    }
    
    public Encoder getLeftEncoder() {
    	return leftEncoder;
    }
    
    public Encoder getRightEncoder() {
    	return rightEncoder;
    }
    
    public void startTimer(){
    	t.start();
    }
    
    public void stopTimer(){
    	t.stop();
    }
    
    public double getTime(){
    	return t.get();
    }
    
    public double getAngle(){
    	return gyro.getAngle();
    }
    
    public void resetAngle(){
    	gyro.reset();
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
        setDefaultCommand(new DriveWithJoysticks());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected class turnOutput implements PIDOutput{
    	public void pidWrite(double output){
    		if(turnControllerEnabled){
    			robotDrive.setLeftRightMotorOutputs(output, -output);
    		}
    	}
    }
    	
    private void initTurnController(){
    	turnController = new PIDController(turn_kP, turn_kI, turn_kD, gyro,  new turnOutput());
    	gyro.reset();
    	turnController.setOutputRange(-.8, .8);
    	turnController.setAbsoluteTolerance(tolerance);    	
    }
    
    public void setTurn(double angle){
    	turnControllerEnabled = true;
    	straightControllerEnabled = false;
    	gyro.reset();
    	turnController.setSetpoint(angle);
    	turnController.enable();
    }
    
    public boolean isTurnDone(){
    	return turnController.onTarget();
    }
    
    public void stopTurn(){
    	turnController.reset();
    	turnControllerEnabled = false;
    	robotDrive.setLeftRightMotorOutputs(0, 0);	
    }
    
    private class AverageEncoder implements PIDSource{
    	public double pidGet(){
    		return distanceTraveled();
    	}
    }
    
    private class StraightOutput implements PIDOutput{
    	public void pidWrite(double output){
    		robotDrive.setLeftRightMotorOutputs(output, output);
    	}
    }
    
    private void initStraightController(){
    	straightController = new PIDController(straight_kP,straight_kI,straight_kD, new AverageEncoder(), new StraightOutput());
    	resetDistance();
    	straightController.setOutputRange(-.8,.8);
    	straightController.setAbsoluteTolerance(tolerance);
    	straightController.setSetpoint(0);
    }
    
    public void setDriveDistance(double distance){
    	turnControllerEnabled = false;
    	straightControllerEnabled = true;
    	straightController.setSetpoint(distance);
    }
    
    public void setStraightDistance(double distance){
    	turnControllerEnabled = false;
    	straightControllerEnabled = false;
    	leftEncoder.reset();
    	rightEncoder.reset();
    	gyro.reset();
    	turnController.setSetpoint(0);
    	turnController.enable();
    	straightController.setSetpoint(0);
    	straightController.enable();
    }
    
    public void driveDistanceStraight(){
    	double straightOutput = straightController.get();
    	double turnOutput = straightController.get();
    	robotDrive.setLeftRightMotorOutputs(straightOutput, turnOutput);
    }
    
    public boolean isDistanceDone(){
    	return straightController.onTarget();
    }
    
    public void endDistance(){
    	straightControllerEnabled = false;
    	straightController.reset();
    	robotDrive.setLeftRightMotorOutputs(0, 0);
    }
}

