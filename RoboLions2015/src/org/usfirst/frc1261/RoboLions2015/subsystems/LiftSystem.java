// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1261.RoboLions2015.subsystems;

import java.util.Arrays;

import org.usfirst.frc1261.RoboLions2015.RobotMap;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.PIDSubsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;


/**
 *
 */
public class LiftSystem extends PIDSubsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder liftEncoder = RobotMap.liftSystemLiftEncoder;
    DigitalInput upperLimit = RobotMap.liftSystemupperLimit;
    DigitalInput lowerLimit = RobotMap.liftSystemlowerLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon backLiftMotor = RobotMap.liftSystembackLiftMotor;
    CANTalon frontLiftMotor = RobotMap.liftSystemfrontLiftMotor;
    
    private static final double LIFT_ENCODER_MIN = 0.0;
    private static final double LIFT_ENCODER_MAX = 680.0;
    
    private static double[] SETPOINTS = {150.0, 300.0, 450.0, 600.0};
    
    // PID constants
    private static final double kP = 0.015;
    private static final double kI = 0.0;
    private static final double kD = 0.005;
    private static final double TOLERANCE = 10.0;
    
    // Initialize your subsystem here
    public LiftSystem() {
        super("LiftSystem", kP, kI, kD);
        setAbsoluteTolerance(TOLERANCE);
        getPIDController().setContinuous(false);
        LiveWindow.addActuator("LiftSystem", "PIDSubsystem Controller", getPIDController());
        
        Arrays.sort(SETPOINTS);

        // Use these to get going:
        // setSetpoint() -  Sets where the PID controller should move the system
        //                  to
        // enable() - Enables the PID controller.
    }
    
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    
    protected double returnPIDInput() {
        // Return your input value for the PID loop
        // e.g. a sensor, like a potentiometer:
        // yourPot.getAverageVoltage() / kYourMaxVoltage;
    	return getLiftHeight();
    }
    
    protected void usePIDOutput(double output) {
        // Use output to drive your system, like a motor
        // e.g. yourMotor.set(output);
    	backLiftMotor.pidWrite(output);
    	frontLiftMotor.pidWrite(output);
    }
    
    public boolean hitLowerLimit() {
    	return lowerLimit.get();
    }
    
    public boolean hitUpperLimit() {
    	return upperLimit.get();
    }

    public double getLiftHeight() {
    	return -liftEncoder.get();
    }
    
    public void raiseLift() {
    	setSetpoint(LIFT_ENCODER_MAX);
    	enable();
    }
    
    public void lowerLift() {
    	setSetpoint(LIFT_ENCODER_MIN);
    	enable();
    }
    
    public void raiseLiftOneLevel() {
    	double currentValue = returnPIDInput();
    	double setpoint;
    	int arrayIndex = 0;
    	while (arrayIndex < SETPOINTS.length && SETPOINTS[arrayIndex] <= currentValue + TOLERANCE) {
    		arrayIndex++;
    	}
    	if (arrayIndex >= SETPOINTS.length) {
    		setpoint = LIFT_ENCODER_MAX;
    	} else {
    		setpoint = SETPOINTS[arrayIndex];
    	}
    	// Assumes the array is sorted, which is why I call Array.sort in the constructor.
    	setSetpoint(setpoint);
    	enable();
    }
    
    public void lowerLiftOneLevel() {
    	double currentValue = returnPIDInput();
    	double setpoint;
    	int arrayIndex = SETPOINTS.length - 1;
    	while (arrayIndex >= 0 && SETPOINTS[arrayIndex] >= currentValue - TOLERANCE) {
    		arrayIndex--;
    	}
    	if (arrayIndex < 0) {
    		setpoint = LIFT_ENCODER_MIN;
    	} else {
    		setpoint = SETPOINTS[arrayIndex];
    	}
    	// Assumes the array is sorted, which is why I call Array.sort in the constructor.
    	setSetpoint(setpoint);
    	enable();
    }
    
    public void resetLiftHeight() {
    	stopLift();
    	liftEncoder.reset();
    }
    
    public void stopLift() {
    	setSetpoint(liftEncoder.pidGet());
    	disable();
    }
//    
//    public void raiseLift()
//    {
//    	backLiftMotor.set(1.0);
//    	frontLiftMotor.set(1.0);
//    }
//        
//    public void lowerLift()
//    {
//    	backLiftMotor.set(-1.0);
//    	frontLiftMotor.set(-1.0);
//    }
//    
//    public void stopLift()
//    {
//    	backLiftMotor.set(0.0);
//    	frontLiftMotor.set(0.0);
//    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
}

