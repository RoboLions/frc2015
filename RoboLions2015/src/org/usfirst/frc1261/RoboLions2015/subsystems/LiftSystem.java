// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1261.RoboLions2015.subsystems;

import org.usfirst.frc1261.RoboLions2015.RobotMap;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class LiftSystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    Encoder liftEncoder = RobotMap.liftSystemLiftEncoder;
    DigitalInput upperLimit = RobotMap.liftSystemupperLimit;
    DigitalInput lowerLimit = RobotMap.liftSystemlowerLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    CANTalon backLiftMotor = RobotMap.liftSystembackLiftMotor;
    CANTalon frontLiftMotor = RobotMap.liftSystemfrontLiftMotor;
    
    private static final double LOWER_LIMIT_ENCODER_VALUE = 0.0;
    private static final double UPPER_LIMIT_ENCODER_VALUE = 675.0;
    private static final double PROXIMITY_THRESHOLD = 200.0;
    
    private Timer timer = new Timer();
    private boolean timerRunning = false;
    
    public class LiftEncoderNotReadyException extends Exception {
    	
		private static final long serialVersionUID = 4622929021347497150L;
    	
    }
    
    private boolean liftEncoderReady = false;
    
    public boolean isLowerLimitHit() {
    	// For this to work, limit switch must be normally closed.
    	boolean limitHit = lowerLimit.get();
    	if (!liftEncoderReady && limitHit) {
    		liftEncoderReady = true;
    		liftEncoder.reset();
    	}
    	return limitHit;
    }
    
    public boolean isUpperLimitHit() {
    	// For this to work, limit switch must be normally closed.
    	boolean limitHit = upperLimit.get();
    	return limitHit;
    }
    
    public boolean isNearLowerLimit() throws LiftEncoderNotReadyException {
    	if (getLiftHeight() <= LOWER_LIMIT_ENCODER_VALUE + PROXIMITY_THRESHOLD) return true;
    	else return false;
    }

    public boolean isNearUpperLimit() throws LiftEncoderNotReadyException {
    	if (getLiftHeight() >= UPPER_LIMIT_ENCODER_VALUE - PROXIMITY_THRESHOLD) return true;
    	else return false;
    }
    
    public double getLiftHeight() throws LiftEncoderNotReadyException {
    	if (liftEncoderReady) return -liftEncoder.getDistance();
    	else throw new LiftEncoderNotReadyException();
    }
    
    public void raiseLift()
    {
    	if (!timerRunning) {
    		timer.start();
    		timerRunning = true;
    	}
    	try {
    		if (isNearUpperLimit()) {
    			backLiftMotor.set((UPPER_LIMIT_ENCODER_VALUE - getLiftHeight()) / PROXIMITY_THRESHOLD);
    			frontLiftMotor.set((UPPER_LIMIT_ENCODER_VALUE - getLiftHeight()) / PROXIMITY_THRESHOLD);
    		}
    	} catch (LiftEncoderNotReadyException e) {
    	}
    	backLiftMotor.set(Math.min(1.0 * timer.get(), 1.0));
    	frontLiftMotor.set(Math.min(1.0 * timer.get(), 1.0));
    }
        
    public void lowerLift()
    {
    	if (!timerRunning) {
    		timer.start();
    		timerRunning = true;
    	}
    	try {
    		if (isNearLowerLimit()) {
    			backLiftMotor.set((LOWER_LIMIT_ENCODER_VALUE - getLiftHeight()) / PROXIMITY_THRESHOLD);
    			frontLiftMotor.set((LOWER_LIMIT_ENCODER_VALUE - getLiftHeight()) / PROXIMITY_THRESHOLD);
    		}
    	} catch (LiftEncoderNotReadyException e) {
    	}
    	backLiftMotor.set(Math.max(-1.0 * timer.get(), -1.0));
    	frontLiftMotor.set(Math.max(-1.0 * timer.get(), -1.0));
    }
    
    public void stopLift()
    {
    	backLiftMotor.set(0.0);
    	frontLiftMotor.set(0.0);
    	timer.stop();
    	timer.reset();
    	timerRunning = false;
    }
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
}

